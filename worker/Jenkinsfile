pipeline {
    agent none

    stages {
        stage("build") {
            when {
                changeset "**/worker/**"
            }
            agent {
                docker {
                    image 'maven:3.8.6-openjdk-11-slim'
                    args "-v /var/jenkins_home/.m2:/root/.m2"
                }
            }
            steps {
                echo 'Compiling worker app...'
                dir('worker') {
                    sh 'mvn compile'
                }
            }
        }

        stage("test") {
            when {
                changeset "**/worker/**"
            }
            agent {
                docker {
                    image 'maven:3.8.6-openjdk-11-slim'
                    args "-v /var/jenkins_home/.m2:/root/.m2"
                }
            }
            steps {
                echo 'Running Unit Tests on worker app...'
                dir('worker') {
                    sh 'mvn clean test'
                }
            }
        }

        stage("package") {
            when {
                branch 'master'
                changeset "**/worker/**"
            }
            agent {
                docker {
                    image 'maven:3.8.6-openjdk-11-slim'
                    args "-v /var/jenkins_home/.m2:/root/.m2"
                }
            }
            steps {
                echo 'Packaging worker app...'
                dir('worker') {
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
        }

        stage("docker package") {
            when {
                branch 'master'
                changeset "**/worker/**"
            }
            agent any
            steps {
                echo 'Packaging worker app with Docker...'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                        def workerImage = docker.build("emmiduh93/worker:v${env.BUILD_ID}", "./worker")
                        workerImage.push()
                        workerImage.push("${env.BRANCH_NAME}")
                        workerImage.push("latest")
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Building multibranch pipeline for worker is completed...'
        }
        failure {
            slackSend(
                channel: "instavote-cd",
                message: "❌ Build Failed - ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            )
        }
        success {
            slackSend(
                channel: "instavote-cd",
                message: "✅ Build Succeeded - ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            )
        }
    }
}

