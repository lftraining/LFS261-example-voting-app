pipeline{
    agent none

    // tools{
    //     nodejs 'node 19.0.1'
    // }

    stages {
        stage('build') {
            when { changeset "**/result/**" }
            agent{
                docker{
                    image 'node:19.0.1-alpine'
                }
            }
            steps {
                echo 'Building node app'
                dir('result'){
                    sh 'npm install'
                    sh 'npm ls'
                }
            }
        }
        stage('test') {
            when { changeset "**/result/**" }
            agent{
                docker{
                    image 'node:19.0.1-alpine'
                }
            }
            steps {
                echo 'Running unit tests on result app'
                dir('result'){
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }
        stage('docker-package') {
            when { 
                changeset "**/worker/**"
                branch 'master'
            }
            agent any
            steps {
                echo 'Packaging result app with docker'
                script {
                    docker.withRegistry('https://index.docker.io/v1/','dockerlogin') {
                        def workerImage = docker.build ("${env.GIT_URL.tokenize('/.')[-3]}/result:v${env.BUILD_ID}", './result')
                        workerImage.push()
                        workerImage.push('latest')
                    }
                }
            }
        }
    }
    post{
        always{            
            echo 'Result multibranch pipeline completed'
        }
        failure{
            slackSend (message: "Build failed: ${env.JOB_NAME} ${BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success{
            slackSend (message: "Build sucess: ${env.JOB_NAME} ${BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}
